* Personal Emacs Configuration üè°
This repository contains the setup for an Emacs configuration, tailored for my use. It has features well suited for:
- Rust
- Common Lisp
- Python
- General editing

It works best on macOS and in a graphical frame. For the best experience, use Mitsuharu's Emacs macOS port, or a pureGTK build on Linux. Currently, it works on Emacs versions `29` and `28`.

The whole configuration lives in this file, so just scroll down!

** How to Install üíª
Firstly, make sure the following programs are installed:
- ~python~, any version that's not ~python2~
- ~ripgrep~ (optional)
- ~git~ (used by ~straight.el~ for managing packages)
- ~gcc~ and ~cmake~, used for ~vterm~ (optional)
- ~fish~, used to make completion files for ~eshell~ (optional)
- ~aspell~, used for enabling spellcheck (optional)
- Any specific language servers/packages needed by certain modes:
  - Shell: ~checkbashisms~
  - LaTeX: ~texlab~
  - Common Lisp: ~sbcl~
  - Markdown: ~markdown~
  - Rust: ~rust-analyzer~
  - Python: ~black~
  - Go: ~gopls~
  
Ideally in a future version of this config, it would prompt you to install these, but that's currently not the case.

~git clone~ this into ~~/.emacs.d~, then start Emacs. This will take some time on initial startup, but after the first boot this process should become substantially faster. It works on *my* machine, but I make no guarantees that this will be the case on yours!
** Things To Improve ü§î
- The theming situation needs some work
- Using less packages is desirable
** The Actual Configuration üìñ
*** Package Manager
The default ~package.el~ is disabled by ~early-init.el~. But we still need to define our repos:
#+begin_src emacs-lisp
    (setq package-archives
	  '(("gnu" . "https://elpa.gnu.org/packages/")
	    ("melpa" . "https://melpa.org/packages/")
	    ("org" . "https://orgmode.org/elpa/")
	    ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

    (package-initialize)
#+end_src
And then install ~diminish~ since we'll call it a lot later:
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src
*** Graphics Fixes
We didn't have the frame loaded and rendered in until this point, so we couldn't fix stuff that was really visually annoying. Now, we can.
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (pixel-scroll-mode)

  (setq use-file-dialog nil
	use-dialog-box nil
	inhibit-startup-screen t)

  (setopt line-number-mode t
	  column-number-mode t
	  x-underline-at-descent-line nil
	  switch-to-buffer-obey-display-actions t
	  show-trailing-whitespace nil
	  indicate-buffer-boundaries 'left)

  ; horizontal mouse scrolling
  (setopt mouse-wheel-tilt-scroll t
	  mouse-wheel-flip-direction t)

  ; line numbers in programming modes
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setopt display-line-numbers-width 3)

  ; wrap text in visual modes
  (add-hook 'text-mode-hook 'visual-line-mode)

  ; modes where hl-line is enabled
  (let ((hl-line-hooks '(text-mode-hook prog-mode-hook)))
    (mapc (lambda (hook) (add-hook hook 'hl-line-mode)) hl-line-hooks))
#+end_src
*** Behavior Fixes
These need to go first because if something fails later I need these loaded. Absolutely vital that this works.
#+begin_src emacs-lisp
  ; need for code snippets
  (require 'org-tempo)

  ; reread files from disk
  (setopt auto-revert-avoid-polling t)
  (setopt auto-revert-interval 5)
  (setopt auto-revert-check-vc-info t)
  (global-auto-revert-mode)

  ;; move through windows with Ctrl-<arrow keys>
  (windmove-default-keybindings 'control)

  ;; fix archaic defaults
  (setopt sentence-end-double-space nil)

  ;; make right-click do something sensible
  (when (display-graphic-p)
    (context-menu-mode))

  ;; don't litter file system with *~ backup files; put them all inside
  ;; ~/.emacs.d/backup or wherever
  (defun personal/backup-file-name (fpath)
    "Return a new file path of a given file path.
  If the new path's directories does not exist, create them."
    (let* ((backupRootDir (concat user-emacs-directory "emacs-backup/"))
	   (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path
	   (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") )))
      (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
      backupFilePath))
  (setopt make-backup-file-name-function 'personal/backup-file-name)

  ;; highlight urls
  ;; if we don't set it this way, xwidget breaks
  (goto-address-prog-mode)

  ;; show the fill column
  (setq-default display-fill-column-indicator-column 80)
  (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)

  ;; force compliation to look nicer
  (add-hook 'complilation-mode-hook 'visual-line-mode)

  ;; nicer prompts
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; doesn't work in older emacs
  (when (version< emacs-version "29")
    (when (boundp 'use-short-answers)
      (setopt use-short-answers t)))

  ;; remember where we are
  (save-place-mode 1)

  ;; always use UTF-8
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (unless *is-a-windows*
    (set-selection-coding-system 'utf-8))

  ;; when we have two unique buffers, act like it
  (require 'uniquify)
  (setq uniquify-separator " ‚Ä¢ "
	uniquify-after-kill-buffer-p t
	uniquify-ignore-buffers-re "^\\*"
	uniquify-buffer-name-style 'reverse)

  ;; handle long files
  (when (fboundp 'so-long-enable)
    (add-hook 'after-init-hook 'so-long-enable))

  ;; when we're a mac, use mdfind not find
  (when *is-a-mac*
    (setq-default locate-command "mdfind"))
#+end_src
*** Utility Functions
These are things that I use that are nice to have but aren't part of GNU Emacs.
#+begin_src emacs-lisp
  ;; kill the buffer and file
  (defun personal/delete-this-file-and-buffer ()
    "Delete the current file and kill its buffer."
    (interactive)
    (unless (buffer-file-name)
      (error "Nothing is being edited right now!"))
    (when (y-or-n-p (format "Really delete '%s'? "
			    (file-name-nondirectory buffer-file-name)))
      (delete-file (buffer-file-name))
      (kill-this-buffer)
      (message "Buffer killed.")))

  ;; Rename the buffer and file
  (defun personal/rename-this-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
	  (filename (buffer-file-name)))
      (unless filename
	(error "Buffer '%s' is not visiting a file!" name))
      (progn
	(when (file-exists-p filename)
	  (rename-file filename new-name 1))
	(set-visited-file-name new-name)
	(rename-buffer new-name)
	(message "Buffer renamed."))))

  ;; Simpify our life.
  (defun personal/revert-to-two-windows ()
    "Delete all other windows and split it into two."
    (interactive)
    (delete-other-windows)
    (split-window-right))

  ;; deal with adding extensions for a mode.
  (defun add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  ;; stops flycheck from yelling at you
  (defun personal/headerise-elisp ()
    "Add minimal header and footer to an elisp buffer in order to placate flycheck."
    (interactive)
    (let ((fname (if (buffer-file-name)
		     (file-name-nondirectory (buffer-file-name))
		   (error "This buffer is not visiting a file"))))
      (save-excursion
	(goto-char (point-min))
	(insert ";;; " fname " --- Insert description here -*- lexical-binding: t -*-\n"
		";;; Commentary:\n"
		";;; Code:\n\n")
	(goto-char (point-max))
	(insert ";;; " fname " ends here\n"))))

#+end_src
*** Packages: Utility
This category is for packages which extend Emacs without adding brand new features. Basically just overhauls of existing features.
**** ~which-key~
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :config
    (which-key-mode))
#+end_src
**** ~sudo-edit~
#+begin_src emacs-lisp
  (use-package sudo-edit
    :if *is-a-linux*
    :ensure t)
#+end_src
**** ~exec-path-from-shell~
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src
**** ~async~
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :config
    (async-bytecomp-package-mode 1)
    (dired-async-mode 1))
#+end_src
**** ~editorconfig~
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :diminish
    :config
    (editorconfig-mode 1))
#+end_src
**** ~whole-line-or-region~
This is extremely useful since we often want to run a command on the line, but don't want to bother with painstakingly selecting the right region
#+begin_src emacs-lisp
  (use-package whole-line-or-region
    :ensure t
    :diminish whole-line-or-region-local-mode
    :hook (after-init . whole-line-or-region-global-mode))
#+end_src
**** ~wgrep~
This package lets us mass edit search results, which is amazing!
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t
    :config
    (setq wgrep-auto-save-buffer t))
#+end_src
**** ~prism~
This color-codes the syntax of code so that it's color coded by syntax level. Like a superpowered version of syntax highlighting.
#+begin_src emacs-lisp
  (use-package prism
    :ensure (:host github :repo "alphapapa/prism.el"))
#+end_src
*** Packages: Appearance
This category is for packages which make Emacs' interface look nicer.
**** Theme: ~solarized~
I quite like the dark solarized theme, so we'll use that.
#+begin_src emacs-lisp
  ; ignore asking if custom themes are safe
  (setq custom-safe-themes t)

  (use-package solarized-theme
    :ensure t
    :demand t
    :config
    (setq solarized-high-contrast-mode-line nil
	  solarized-distinct-doc-face t
	  solarized-distinct-fringe-background t
	  solarized-emphasize-indicators t
	  x-underline-at-descent-line t)
    (load-theme 'solarized-selenized-black t))
#+end_src
**** ~smooth-scrolling~
This is the best package at least on macOS, and probably the best on Linux too.
#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :diminish
    :hook (after-init . (lambda ()
			  (smooth-scrolling-mode 1))))
#+end_src
**** ~dimmer~
#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :if window-system
    :diminish
    :config
    (require 'dimmer)
    (dimmer-configure-which-key)
    (dimmer-configure-helm)
    (dimmer-mode t))
#+end_src
**** ~beacon~
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :diminish
    :config
    (beacon-mode 1))
#+end_src
**** ~goggles~
#+begin_src emacs-lisp
  ;; flash the text that we're looking at when editing
  (use-package goggles
    :ensure t
    :diminish
    :hook ((prog-mode text-mode) . goggles-mode)
    :config
    (setq-default goggles-pulse t))
#+end_src
**** ~highlight-indent-guides~
This package is a bit slow, but still the fastest one out there.
#+begin_src emacs-lisp
  ;; show us the end of the indentation lines
  (use-package highlight-indent-guides
    ;; the original package has a bug with background colors,
    ;; this fork fixes it.
    :ensure (:host github :repo "getong/highlight-indent-guides")
    :diminish
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character))
#+end_src
**** ~highlight-escape-sequences~
#+begin_src emacs-lisp
  (use-package highlight-escape-sequences
    :ensure t
    :diminish hes-mode
    :hook (after-init . hes-mode))
#+end_src
**** ~highlight-numbers~
This package highlights numerical literals, not just any random number
#+begin_src emacs-lisp
  (use-package highlight-numbers
    :ensure t
    :diminish
    :hook (prog-mode . highlight-numbers-mode))
#+end_src
**** ~page-break-lines~
Shows us when the page break character is there in our text.
#+begin_src emacs-lisp
  (use-package page-break-lines
    :ensure t
    :diminish
    :hook (after-init . global-page-break-lines-mode))
#+end_src
**** ~rainbow-delimiters~
This only applies to parenthesis, but it makes Lisp a lot easier to read!
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :diminish rainbow-delimiters-mode
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
**** ~rainbow-mode~
Make hex color codes match their values.
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish
    :hook ((emacs-lisp-mode . rainbow-mode)
	   (help-mode . rainbow-mode)
	   ((css-mode html-mode sass-mode) . rainbow-mode)))
#+end_src
*** Packages: Overhauls
Some parts of Emacs are fundamentally broken. These packages replace those features outright with new things. I note what's being replaced.
**** ~eat~: Replacement of ~ansi-term~
There's no need for ~vterm~ because honestly this thing is so fast it's good enough for almost every use case.
#+begin_src emacs-lisp
  (use-package eat
    :ensure t
    :custom
    (eat-term-name "xterm")
    :config
    (eat-eshell-mode)                    
    (eat-eshell-visual-command-mode))
#+end_src
**** ~jinx~: Replacement of ~flyspell~
Flyspell is the worst. This is a much better alternative with almost no downsides. We'll also fix our dictionary while we're at it.
#+begin_src emacs-lisp
  (use-package jinx
    :ensure t
    :hook (((text-mode prog-mode) . jinx-mode))
    :bind (("C-;" . jinx-correct))
    :custom
    (jinx-camel-modes '(prog-mode))
    (jinx-delay 0.01))

  (setopt dictionary-use-single-buffer t
	  dictionary-server "dict.org")
#+end_src
**** A Bunch of ~eshell~ Fixes
There's not really one big package that fixes ~eshell~, but a lot of these get really close to a full overhaul.

Here's one that lets us see command feedback, like in ~zsh~:
#+begin_src emacs-lisp
  (use-package eshell-fringe-status
    :ensure t
    :after eshell
    :diminish eshell-fringe-status-mode
    :hook (eshell-mode . eshell-fringe-status-mode))
#+end_src
And we probably want some better suggestion feedback:
#+begin_src emacs-lisp
  (use-package eshell-did-you-mean
    :ensure t
    ; doesn't work on Windows
    :if (or *is-a-linux* *is-a-mac*)
    :after eshell
    :config
    (eshell-did-you-mean-setup))

  (use-package esh-autosuggest
    :ensure t
    :after eshell
    :diminish eshell-autosuggest-mode
    :hook (eshell-mode . esh-autosuggest-mode))
#+end_src
We can also use ~fish~ scripts in ~eshell~, if it's installed:
#+begin_src emacs-lisp
  (use-package fish-completion
    :ensure t
    :after eshell
    :diminish global-fish-completion-mode
    :if (and (executable-find "fish") (or *is-a-linux* *is-a-mac*))
    :config
    (global-fish-completion-mode))
#+end_src
Lastly, syntax highlighting:
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :ensure t
    :diminish eshell-syntax-highlighting-global-mode
    :after eshell
    :config
    (eshell-syntax-highlighting-global-mode +1))
#+end_src
**** ~consult~: Command Enhancements
These commands completely replace their stock components with upgrades.
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :bind (
	   ;; Drop-in replacements
	   ("C-x b" . consult-buffer)     ; orig. switch-to-buffer
	   ("M-y"   . consult-yank-pop)   ; orig. yank-pop
	   ;; Searching
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)       ; Alternative: rebind C-s to use
	   ("M-s s" . consult-line)       ; consult-line instead of isearch, bind
	   ("M-s L" . consult-line-multi) ; isearch to M-s s
	   ("M-s o" . consult-outline)
	   ;; Isearch integration
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)   ; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history) ; orig. isearch-edit-string
	   ("M-s l" . consult-line)            ; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)      ; needed by consult-line to detect isearch
	   )
    :config
    ;; Narrowing lets you restrict results to certain groups of candidates
    (setq consult-narrow-key "<"))
#+end_src
**** ~vertico~: Better Vertical Completion
Basically exactly what it says. Makes every menu better.
#+begin_src emacs-lisp  
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))

  (use-package vertico-directory
    :ensure nil
    :after vertico
    :bind (:map vertico-map
		("M-DEL" . vertico-directory-delete-word)))
#+end_src
**** ~marginalia~: Annotations with Completions
Helps you figure out what exactly that option does.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))
#+end_src
**** ~orderless~: Global Fuzzy Find
This is a magical package that allows for any matching string to work in a search.
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless)))
#+end_src
**** ~corfu~: In-Buffer Completion
This is popup completion, which is a feature GNU Emacs has but doesn't use well.
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :diminish corfu-mode corfu-popupinfo-mode
    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode)
    :bind (:map corfu-map ("RET" . nil))
    ;; if we use eshell, be careful not to autocomplete
    :hook (eshell-mode-hook . (lambda ()
				(setq-local corfu-auto nil)
				(corfu-mode)))
    :config
    ;; use corfu in the minibuffer
    (defun corfu-enable-always-in-minibuffer ()
      (unless (or (bound-and-true-p mct--active)
		    (bound-and-true-p vertico--input))
      (setq-local corfu-auto nil)
      (corfu-mode 1)))
    (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
    ;; automatic completion!
    (setq corfu-auto t
	  corfu-quit-no-match 'separator
	  corfu-echo-documentation nil)
    ;; turn on corfu's plugins
    (corfu-history-mode 1))
#+end_src
We also want some popups and to have it work in the terminal:
#+begin_src emacs-lisp
  (use-package corfu-terminal
    :if (not (display-graphic-p))
    :ensure t
    :diminish
    :config
    (corfu-terminal-mode))
#+end_src
*** Packages: Additions
These packages add brand-new features and modes to Emacs.
**** ~magit~: A Git Client
A complete Git client is a pretty amazing thing.
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
#+end_src
We'll also grab a few bonus features as well:
#+begin_src emacs-lisp
  (use-package magit-todos
    :ensure t
    :after magit
    :diminish
    :init
    (magit-todos-mode 1))
#+end_src
**** ~diff-hl~: Changes in Fringes
Shows what has changed between Git commits. This doesn't work without a graphical frame and it doesn't work on non-version controlled files.
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :if window-system
    :hook (after-init . global-diff-hl-mode)
    :diminish global-diff-hl-mode
    :custom
    (diff-hl-disable-on-remote t)
    (diff-hl-margin-symbols-alist
     '((insert . "+")
       (delete . "-")
       (change . "*")
       (unknown . "?")
       (ignored . "i"))))

#+end_src
**** Language: Python
The actual mode is bundled with Emacs. This fixes syntax:
#+begin_src emacs-lisp
  (use-package blacken
    :ensure t
    :ensure-system-package black
    :diminish
    :hook ((python-mode . blacken-mode)))
#+end_src
And this lets us edit PIP standards:
#+begin_src emacs-lisp
  (use-package pip-requirements
    :ensure t)
#+end_src
**** Language: Go
The mode doesn't really come with Emacs:
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :config
    (add-hook 'before-save-hook 'gofmt-before-save)
    :init
    ;; fix annoying issues with GOPATH
    (setenv "GOPATH" (concat (getenv "HOME") "/.go")))
#+end_src
